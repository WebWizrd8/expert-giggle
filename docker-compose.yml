version: '3'

services:
    web-random:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements.txt
        image: web-random-image
        ports:
            - "800:5000"
        entrypoint: python ./flask-mongodb-example/random_demo.py
        deploy:
          restart_policy:
            condition: on-failure
        depends_on:
            - mongo

    web-users:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements.txt
        image: web-users-image
        ports:
            - "81:5000"
        entrypoint: python ./flask-mongodb-example/users.py
        deploy:
          restart_policy:
            condition: on-failure
        depends_on:
            - mongo

    web-mqtt:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements-mqtt.txt
        image: web-mqtt-image
        entrypoint: python ./flask-mongodb-example/mqtt.py
        deploy:
          restart_policy:
            condition: on-failure
        depends_on:
            - mongo
            - mqtt
        tty: true

    web-fulltext-search:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements.txt
        image: web-fulltext-image
        ports:
            - "82:5000"
        entrypoint: python ./flask-mongodb-example/fulltext_search.py
        deploy:
          restart_policy:
            condition: on-failure
        depends_on:
            - mongo

    web-geolocation-search:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements.txt
        image: web-geolocation-image
        ports:
            - "83:5000"
        entrypoint: python ./flask-mongodb-example/geolocation_search.py
        deploy:
            restart_policy:
                condition: on-failure
        depends_on:
            - mongo

    web-baesian:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements.txt
        image: web-baesian-image
        ports:
            - "84:5000"
        entrypoint: python ./flask-mongodb-example/baesian.py
        deploy:
            restart_policy:
                condition: on-failure
        depends_on:
            - mongo

    web-photo-process:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements-photo.txt
        image: web-photo-image
        ports:
            - "85:5000"
        entrypoint: python ./flask-mongodb-example/photo_process.py
        volumes:
            - ./container-storage:/root/storage
        deploy:
            restart_policy:
                condition: on-failure
        depends_on:
            - mongo

    web-book-collection:
        build:
            context: .
            args:
                requirements: ./flask-mongodb-example/requirements-restplus.txt
        image: web-bookcollection-image
        environment:
             - PYTHONUNBUFFERED=1
        ports:
            - "86:5000"
        entrypoint: python ./flask-mongodb-example/bookcollection.py
        deploy:
            restart_policy:
                condition: on-failure
        depends_on:
            - mongo
            - web-users

    mongo:
        image: mongo:4.0.5-xenial
        deploy:
            restart_policy:
                condition: always
        ports:
            - "27017:27017"

    mqtt:
        build:
          context: ./docker-mosquitto
        deploy:
            restart_policy:
                condition: always
        ports:
            - "1883:1883"